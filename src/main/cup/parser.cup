package lyc.compiler;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.*;
import lyc.compiler.tabla_simbolos.*;
import lyc.compiler.model.*;

class Parser;

action code
{:
    public Manejador_Tabla_Simbolos manejadorTablaSimbolos = new Manejador_Tabla_Simbolos();
    public ArrayList<Simbolo> listaSimbolos = new ArrayList<>();
    public int cantidadElementos = 0;
    public int index = 0;
:}

parser code
{:
    public ArrayList<Simbolo> getTablaSimbolos() { 
        return action_obj.manejadorTablaSimbolos.getTablaSimbolos();
    }
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_PAREN;
terminal CLOSE_PAREN;
terminal OPEN_BRACE;
terminal CLOSE_BRACE;
terminal IDENTIFIER;
terminal IF;
terminal ELSE;
terminal ELSEIF;
terminal AND;
terminal OR;
terminal NOT;
terminal GREATERTHAN;
terminal LESSTHAN;
terminal GREATEREQUAL;
terminal LESSEQUAL;
terminal EQUALS;
terminal NOTEQUALS;
terminal FLOAT_CONSTANT;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal WRITE;
terminal READ;
terminal WHILE;
terminal INIT;
terminal COLON;
terminal COMMA;
terminal INT;
terminal FLOAT;
terminal STRING;


// Non Terminals
non terminal sentence;
non terminal program;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal sentence_list;
non terminal condicion;
non terminal condicional;
non terminal elseif_clauses;
non terminal relational_op;
non terminal elseif_clauses_optional;
non terminal declaration;
non terminal declaration_list;
non terminal type;
non terminal declarations;
non terminal variable_names;
non terminal name_init;
non terminal variable;
non terminal simple_condicion;
non terminal multiple_condicion;


start with program;

program ::= sentence_list
{: 
    System.out.println("Fin"); 
:}
| 
{: 
    System.out.println("Programa Vacio"); 
:};

sentence_list ::= sentence_list sentence 
               | sentence;



/******** TEMAS COMUNES: Declaración de variables  ********/
sentence ::= INIT OPEN_BRACE declaration_list CLOSE_BRACE 
{: 
    System.out.println("Initialization block parsed."); 
:};

declaration_list ::= declaration_list declaration
               | declaration;

declaration ::= variable_names COLON type:type_spec;

variable_names ::= variable_names COMMA name_init:type_spec
                 | name_init:type_spec;

name_init ::= IDENTIFIER:id
{:
    Simbolo symbol = new Simbolo(id.toString(), "", "", 0);
    this.listaSimbolos.add(symbol);
    System.out.println("Se inicializo la variable: " + id.toString());
:};

type ::= FLOAT
{:
    System.out.println("Se inicializaron todos los datos tipo Float");
    action_obj.manejadorTablaSimbolos.addVariablesFromArrayList(this.listaSimbolos, "Float");
    this.listaSimbolos.clear(); 
:}
| INT
{:
    System.out.println("Se inicializaron todos los datos tipo Int");
    action_obj.manejadorTablaSimbolos.addVariablesFromArrayList(this.listaSimbolos, "Int");
    this.listaSimbolos.clear(); 
:}
| STRING
{:
    System.out.println("Se inicializaron todos los datos tipo String");
    action_obj.manejadorTablaSimbolos.addVariablesFromArrayList(this.listaSimbolos, "String");
    this.listaSimbolos.clear();
:};

/******** TEMAS COMUNES: Asignaciones  ********/
sentence ::= {: System.out.println("Inicio de sentencia"); :} assignment {: System.out.println("Fin de sentencia"); :};
assignment ::= IDENTIFIER:id ASSIG expression:e  
{:
    System.out.println("Assignment");
    System.out.println("Id al cual se asigna: " + id);

    Simbolo existingSymbol = action_obj.manejadorTablaSimbolos.getSymbol(id.toString());

    if (existingSymbol != null) {
        String existingType = existingSymbol.getTipoDato();
        String newType = ((Simbolo)e).getTipoDato(); 

        if (!existingType.equals(newType)) {
            throw new RuntimeException("Type mismatch: No se puede asignar valor de tipo " + newType + " a la variable " + id.toString() + " de tipo " + existingType);
        }
    } else {
    Simbolo symbol = action_obj.manejadorTablaSimbolos.getSymbol(id.toString());

    if (symbol == null) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }
    RESULT = symbol;
    System.out.println("Id: " + id);
    }
:};

expression ::= expression PLUS term:e {: RESULT = e; System.out.println("+"); :};
expression ::= expression SUB term:e {: RESULT = e; System.out.println("-"); :};
expression ::= term:e {: RESULT = e; :};

term ::= term MULT factor:f {: RESULT = f; System.out.println("*"); :};
term ::= term DIV factor:f {: RESULT = f; System.out.println("/"); :};
term ::= factor:f {: RESULT = f; :};

factor ::= IDENTIFIER:id  
{: 
    Simbolo symbol = action_obj.manejadorTablaSimbolos.getSymbol(id.toString());

    if (symbol == null) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }

    RESULT = symbol;
    System.out.println("Id: " + id);
:};

factor ::= FLOAT_CONSTANT:constant 
{: 
    System.out.println("Float Constant: " + constant ); 
    Simbolo symbol = new Simbolo("_" + constant.toString(), "Float", constant.toString(), constant.toString().length());
    action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    RESULT = symbol;
:};

factor ::= INTEGER_CONSTANT:constant 
{: 
    System.out.println("Int Constant: " + constant ); 
    Simbolo symbol = new Simbolo("_" + constant.toString(), "Int", constant.toString(), constant.toString().length());
    action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    RESULT = symbol;
:};

factor ::= STRING_CONSTANT:constant 
{: 
    System.out.println("String Constant: " + constant ); 
    Simbolo symbol = new Simbolo("_" + constant.toString(), "String", constant.toString(), constant.toString().length());
    action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    RESULT = symbol;
:};

factor ::= OPEN_PAREN expression:e CLOSE_PAREN {: RESULT = e; System.out.println("Factor = (Expression)"); :};
/******** TEMAS COMUNES: Si / Si - sino  ********/
sentence ::= IF condicional OPEN_BRACE sentence_list CLOSE_BRACE elseif_clauses_optional
{: System.out.println("If with optional else/elseif"); :};

elseif_clauses_optional ::= ELSE OPEN_BRACE sentence_list CLOSE_BRACE 
{: System.out.println("Else clause"); :}
| elseif_clauses
| /* empty */
{: System.out.println("No else/elseif"); :};

elseif_clauses ::= ELSEIF condicional OPEN_BRACE sentence_list CLOSE_BRACE elseif_clauses_optional
{: System.out.println("Else If"); :};

/******** TEMAS COMUNES: Condiciones  ********/
condicional ::= OPEN_PAREN simple_condicion CLOSE_PAREN
{: System.out.println("Condicional simple"); :}
| OPEN_PAREN NOT simple_condicion CLOSE_PAREN
{: System.out.println("Condicional NOT"); :}
| OPEN_PAREN multiple_condicion CLOSE_PAREN
{: System.out.println("Condicional múltiple"); :};

simple_condicion ::= factor relational_op factor
{: System.out.println("Condición simple"); :};

multiple_condicion ::= simple_condicion AND simple_condicion
{: System.out.println("Condición con AND"); :}
| simple_condicion OR simple_condicion
{: System.out.println("Condición con OR"); :};

relational_op ::= GREATERTHAN
{: System.out.println("Operador relacional mayor"); :}
| LESSTHAN
{: System.out.println("Operador relacional menor"); :}
| GREATEREQUAL
{: System.out.println("Operador relacional mayor o igual"); :}
| LESSEQUAL
{: System.out.println("Operador relacional menor o igual"); :}
| EQUALS
{: System.out.println("Operador relacional igual"); :}
| NOTEQUALS
{: System.out.println("Operador relacional no igual"); :};

/******** TEMAS COMUNES: Mientras  ********/
sentence ::= WHILE condicional OPEN_BRACE sentence_list CLOSE_BRACE
{: 
    System.out.println("Bucle While");
:};


/******** TEMAS COMUNES: Entrada y salida  ********/

sentence ::= READ OPEN_PAREN variable CLOSE_PAREN
{: 
    System.out.println("Función Leer");
:};

sentence ::= WRITE OPEN_PAREN variable CLOSE_PAREN
{: 
    System.out.println("Funcion Escribir");
:}
| WRITE OPEN_PAREN STRING_CONSTANT CLOSE_PAREN
{: 
    System.out.println("Funcion Escribir");
:};

variable ::= IDENTIFIER:id
{: 
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(id.toString())) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }
:};

