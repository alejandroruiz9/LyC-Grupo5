/**
 * Este compilador utiliza para la generación de código intermedio
 * tercetos y una tabla de símbolos para la gestión de tipos de datos.
 * Detallamos a continuacion algunas consideraciones que se tuvieron a la hora de armar el compilador:
 * 
 * 1. **Declaración de Variables**:
 *    - Las variables deben ser declaradas antes de ser usadas en cualquier operación o asignación.
 *    - Los tipos soportados son `INT`, `FLOAT`, y `STRING`.
 *    - El tipo de las variables se determina durante la declaración y se almacena en la tabla de símbolos.
 *
 * 2. **Asignaciones**:
 *    - Las asignaciones deben respetar las reglas de tipos de datos. No es posible asignar un valor de tipo diferente
 *      al tipo de la variable.
 *      Por ejemplo, no se puede asignar un `FLOAT` a una variable `INT`, lo que dara un error de tipo de dato.
 * 
 * 3. **Operaciones Aritméticas**:
 *    - Las operaciones aritméticas como suma (+), resta (-), multiplicación (*) y división (/) requieren que ambos operandos
 *      sean del mismo tipo. Si se intenta operar con tipos incompatibles, se lanzará un error.
 *      Esta pendiente la creacion de una funcion de casteo que permita operar con diferentes tipos de variables
 *
 * 4. **Condicionales y Comparaciones**:
 *    - Las comparaciones en condicionales deben realizarse entre operandos del mismo tipo.
 *    - Los operadores relacionales incluyen mayor (`>`), menor (`<`), igual (`==`), y sus combinaciones con mayor o igual (`>=`),
 *      menor o igual (`<=`), no igual (`!=`).
 *    - En caso de intentar comparar tipos incompatibles, se lanzará un error de tipo de dato.
 * 
 * 5. **Control de Flujo**:
 *    - El compilador soporta estructuras de control como `if-else` y `while`. No se acepta elseif.
 *    - Las condiciones en estas estructuras deben ser evaluaciones booleanas, derivadas de las comparaciones entre valores.
 * 
 * 6. **Entrada y Salida**:
 *    - `READ` y `WRITE` permiten leer y escribir valores de variables y constantes.
 *    - Las operaciones de lectura y escritura deben ser coherentes con el tipo de dato de las variables.
 * 
 * 7. **Manejo de Expresiones Especiales**:
 *    - Se incluyen operaciones especiales como `BINARYCOUNT` para contar el número de números binarios en una lista
 *      y `GET_PENULTIMATE_POSITION` para obtener el elemento en una posición específica de una lista.
 *    - Estas operaciones se implementan con la validación necesaria de los valores ingresados.
 * 
 * 8. **Errores de Tipos**:
 *    - El sistema de tipos garantiza que no se puedan realizar operaciones o asignaciones entre tipos incompatibles,
 *      lanzando errores cuando estos casos se detectan durante la compilación.
 * 
 */


package lyc.compiler;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import lyc.compiler.tercetos.*;
import lyc.compiler.files.*;
import java.util.Stack;
import java_cup.runtime.*;
import lyc.compiler.tabla_simbolos.*;
import lyc.compiler.Assembler.*;
import lyc.compiler.model.*;
import java.util.Map;
import java.util.HashMap;

class Parser;

action code
{:
    /**** Tabla de simbolos ****/
    public Manejador_Tabla_Simbolos manejadorTablaSimbolos = new Manejador_Tabla_Simbolos();
    public ArrayList<Simbolo> listaSimbolos = new ArrayList<>();
    public int index = 0;
    // HashMap para asociar constantes String con nombres únicos
    HashMap<String, String> mapaConstantesString = new HashMap<>();
    int contadorString = 1;


    /**** Tercetos ****/
    public ArrayList<Tercetos> listaDeTercetos = new ArrayList<>();
    public Stack<Integer> tercetoStack = new Stack<>();
    public Stack<Integer> numerosDeTercetosStack = new Stack<>();

    public IntermediateCodeGenerator intermediateCode = new IntermediateCodeGenerator(listaDeTercetos);
    public ManejadorTercetos manejador_Tercetos = new ManejadorTercetos();
    
    Map<Integer, String> mapaTiposTercetos = new HashMap<>();
    public int indexTerceto = 1;
    public int indexTercetoInicial;
    String operadorContrario = "";
    public int terceto_salto = 0;

    public String invertirOperador(String operador) {
    switch (operador) {
        case "BGE": return "BLT";  // Mayor o igual -> Menor
        case "BLE": return "BGT";  // Menor o igual -> Mayor
        case "BGT": return "BLE";  // Mayor -> Menor o igual
        case "BLT": return "BGE";  // Menor -> Mayor o igual
        case "BEQ": return "BNE";  // Igual -> No igual
        case "BNE": return "BEQ";  // No igual -> Igual
        default: throw new RuntimeException("Operador no válido para inversión: " + operador);
    }
}
    /**** Assembler ****/
    public ManejadorAssembler manAsm = new ManejadorAssembler(manejadorTablaSimbolos.getTablaSimbolos(), manejador_Tercetos.getIntermediateCode(),mapaConstantesString);


:}

parser code
{:
    public ArrayList<Simbolo> getTablaSimbolos() { 
        return action_obj.manejadorTablaSimbolos.getTablaSimbolos();
    }

        public ArrayList<Tercetos> getIntermediateCode() {
            return action_obj.manejador_Tercetos.getIntermediateCode();
    }

    public ArrayList<String> getAsmInstructions() {
        return action_obj.manAsm.getAsmInstructions();
    }

:}


// Terminales
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_PAREN;
terminal CLOSE_PAREN;
terminal OPEN_BRACE;
terminal CLOSE_BRACE;
terminal IDENTIFIER;
terminal IF;
terminal ELSE;
terminal AND;
terminal OR;
terminal NOT;
terminal GREATERTHAN;
terminal LESSTHAN;
terminal GREATEREQUAL;
terminal LESSEQUAL;
terminal EQUALS;
terminal NOTEQUALS;
terminal FLOAT_CONSTANT;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal WRITE;
terminal WRITELN;
terminal READ;
terminal WHILE;
terminal INIT;
terminal COLON;
terminal SEMICOLON;
terminal COMMA;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal GET_PENULTIMATE_POSITION;
terminal BINARYCOUNT;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
// No Terminales
non terminal sentence;
non terminal program;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal sentence_list;
non terminal condicional;
non terminal relational_op;
non terminal declaration;
non terminal declaration_list;
non terminal type;
non terminal variable_names;
non terminal name_init;
non terminal variable;
non terminal simple_condicion;
non terminal multiple_condicion;
non terminal param_list;
non terminal binary_count_expr;
non terminal getPenultimatePosition_expr;


start with program;

program ::= sentence_list
{: 
    System.out.println("Fin"); 
    manAsm.generateAssembler();
:}
| 
{: 
    System.out.println("Programa Vacio"); 
:};

sentence_list ::= sentence_list sentence;

sentence_list ::= sentence;




/******** TEMAS COMUNES: Declaración de variables  ********/
sentence ::= INIT OPEN_BRACE declaration_list CLOSE_BRACE 
{: 
    System.out.println("Bloque de inicializacion terminado."); 
:};

declaration_list ::= declaration_list declaration
               | declaration;

declaration ::= variable_names COLON type:type_spec;

variable_names ::= variable_names COMMA name_init:type_spec
                 | name_init:type_spec;

name_init ::= IDENTIFIER:id
{:
    // Verificar si la variable ya está en la tabla de símbolos
    if (action_obj.manejadorTablaSimbolos.containsSymbol(id.toString())) {
        throw new RuntimeException("Error: La variable '" + id.toString() + "' ya está declarada.");
    }

    // Crear y agregar la nueva variable
    Simbolo symbol = new Simbolo(id.toString(), "", "", null);
    this.listaSimbolos.add(symbol);
    System.out.println("Se inicializó la variable: " + id.toString());
:};

type ::= FLOAT
{:
    System.out.println("Se inicializaron todos los datos tipo Float");
    action_obj.manejadorTablaSimbolos.addVariablesFromArrayList(this.listaSimbolos, "Float");
    this.listaSimbolos.clear(); 
:}
| INT
{:
    System.out.println("Se inicializaron todos los datos tipo Int");
    action_obj.manejadorTablaSimbolos.addVariablesFromArrayList(this.listaSimbolos, "Int");
    this.listaSimbolos.clear(); 
:}
| STRING
{:
    System.out.println("Se inicializaron todos los datos tipo String");
    action_obj.manejadorTablaSimbolos.addVariablesFromArrayList(this.listaSimbolos, "String");
    this.listaSimbolos.clear();
:};

/******** TEMAS COMUNES: Asignaciones  ********/
sentence ::= {: System.out.println("Inicio de sentencia"); :} assignment {: System.out.println("Fin de sentencia"); :};
assignment ::= IDENTIFIER:id ASSIG expression:e  
{:
    System.out.println("Asignación a variable: " + id);


    int indice = action_obj.manejador_Tercetos.getIntermediateCode().size() + 1;
    action_obj.manejador_Tercetos.crearNuevoTerceto(indice, ":=", "[" + action_obj.manejador_Tercetos.obtenerIndice("expression") + "]", id.toString());
    
    Simbolo existingSymbol = action_obj.manejadorTablaSimbolos.getSymbol(id.toString());
    
    if (existingSymbol == null) {
        throw new RuntimeException("La variable '" + id + "' no está definida.");
    }

    // Obtener el tipo de la variable desde la tabla de símbolos (lado izquierdo)
    String tipoVariable = existingSymbol.getTipoDato();
    
    // Obtener el tipo de la expresión desde el mapa de tipos de tercetos (lado derecho)
    int indiceExpresion = action_obj.manejador_Tercetos.obtenerIndice("expression");
    String tipoExpresion = mapaTiposTercetos.get(indiceExpresion);

    // Validar que el tipo de la expresión sea compatible con el tipo de la variable
    if (!tipoVariable.equals(tipoExpresion)) {
        throw new RuntimeException("Type mismatch: No se puede asignar " + tipoExpresion + " a " + tipoVariable);
    }
    indexTerceto++;
    // Asignar el tipo de la variable al terceto de asignación
    mapaTiposTercetos.put(indice, tipoVariable);

    RESULT = id;
:};
expression ::= expression:e1 PLUS term:e2 
{:
    // Crear el terceto de suma
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, "+", "[" + action_obj.manejador_Tercetos.obtenerIndice("expression") + "]", "[" + action_obj.manejador_Tercetos.obtenerIndice("term") + "]"));
    

    // Validar los tipos de los operandos
    String tipoE1 = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("expression"));
    String tipoE2 = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("term"));
    
    if (tipoE1.equals(tipoE2)) {
        // Asignar tipo al terceto de suma
        mapaTiposTercetos.put(indexTerceto, tipoE1);
    } else {
        throw new RuntimeException("Type mismatch: No se puede sumar " + tipoE1 + " con " + tipoE2);
    }
    action_obj.manejador_Tercetos.agregarIndice("expression", indexTerceto);
    indexTerceto++;
    RESULT = new Simbolo("", tipoE1, "", null);
:}
| expression:e1 SUB term:e2 
{:
    // Crear el terceto de resta
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, "-", "[" + action_obj.manejador_Tercetos.obtenerIndice("expression") + "]", "[" + action_obj.manejador_Tercetos.obtenerIndice("term") + "]"));
    

    // Validar los tipos de los operandos
    String tipoE1 = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("expression"));
    String tipoE2 = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("term"));
    
    if (tipoE1.equals(tipoE2)) {
        // Asignar tipo al terceto de resta
        mapaTiposTercetos.put(indexTerceto, tipoE1);
    } else {
        throw new RuntimeException("Type mismatch: No se puede restar " + tipoE1 + " con " + tipoE2);
    }
    action_obj.manejador_Tercetos.agregarIndice("expression", indexTerceto);    
    indexTerceto++;
    RESULT = new Simbolo("", tipoE1, "", null);
:}
| term:e 
{:

    System.out.println("Expression = Term");

    action_obj.manejador_Tercetos.apuntarAOtroIndice("expression", "term");
    RESULT = e;
:}
| getPenultimatePosition_expr:e 
{:
    action_obj.manejador_Tercetos.apuntarAOtroIndice("expression", "getPenultimatePosition_expr");
    
    RESULT = e;
:}
| binary_count_expr:e 
{:
    action_obj.manejador_Tercetos.apuntarAOtroIndice("expression", "binary_count_expr");
    RESULT = e;
:};

term ::= term:t MULT factor:f 
{:

    // Crear el terceto de multiplicación
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, "*", "[" + action_obj.manejador_Tercetos.obtenerIndice("term") + "]", "[" + action_obj.manejador_Tercetos.obtenerIndice("factor") + "]"));
    

    // Validar los tipos de los operandos
    String tipoT = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("term"));
    String tipoF = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("factor"));
    
    if (tipoT.equals(tipoF)) {
        // Asignar tipo al terceto de multiplicación
        mapaTiposTercetos.put(indexTerceto, tipoT);
    } else {
        throw new RuntimeException("Type mismatch: No se puede multiplicar " + tipoT + " con " + tipoF);
    }
    action_obj.manejador_Tercetos.agregarIndice("term", indexTerceto);
    indexTerceto++;
    RESULT = new Simbolo("", tipoT, "", null);
:}
| term:t DIV factor:f 
{:
    // Crear el terceto de división
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, "/", "[" + action_obj.manejador_Tercetos.obtenerIndice("term") + "]", "[" + action_obj.manejador_Tercetos.obtenerIndice("factor") + "]"));
    
    // Validar los tipos de los operandos
    String tipoT = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("term"));
    String tipoF = mapaTiposTercetos.get(action_obj.manejador_Tercetos.obtenerIndice("factor"));
    
    if (tipoT.equals(tipoF)) {
        // Asignar tipo al terceto de división
        mapaTiposTercetos.put(indexTerceto, tipoT);
    } else {
        throw new RuntimeException("Type mismatch: No se puede dividir " + tipoT + " con " + tipoF);
    }
    action_obj.manejador_Tercetos.agregarIndice("term", indexTerceto);
    indexTerceto++;
    RESULT = new Simbolo("", tipoT, "", null);
:}
| factor:f 
{:

    action_obj.manejador_Tercetos.apuntarAOtroIndice("term", "factor");
    RESULT = f;
:};


factor ::= IDENTIFIER:id  
{:
    Simbolo symbol = action_obj.manejadorTablaSimbolos.getSymbol(id.toString());
    if (symbol == null) {
        throw new RuntimeException("La variable '" + id.toString() + "' no está definida.");
    }

    // Crear el terceto y asignar el tipo de dato desde la tabla de símbolos
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, id.toString(), "_", "_"));
    action_obj.manejador_Tercetos.agregarIndice("factor", indexTerceto);
    
    // Asignar tipo al terceto
    mapaTiposTercetos.put(indexTerceto, symbol.getTipoDato());
    tercetoStack.push(indexTerceto);
    indexTerceto++;
    RESULT = symbol;
:};

factor ::= FLOAT_CONSTANT:constant 
{:
    Simbolo symbol = new Simbolo("_" + constant.toString(), "CTE_FLOAT", constant.toString(), null);
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(symbol.getNombre())) {
        action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    }

    // Crear el terceto y asignar tipo de dato "Float"
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, constant.toString(), "_", "_"));
    action_obj.manejador_Tercetos.agregarIndice("factor", indexTerceto);
    mapaTiposTercetos.put(indexTerceto, "Float"); 
    tercetoStack.push(indexTerceto);
    indexTerceto++;
    RESULT = symbol;
:};

factor ::= INTEGER_CONSTANT:constant 
{:
    Simbolo symbol = new Simbolo("_" + constant.toString(), "CTE_INTEGER", constant.toString(), null);
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(symbol.getNombre())) {
        action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    }

    // Crear el terceto y asignar tipo de dato "Int"
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, constant.toString(), "_", "_"));
    action_obj.manejador_Tercetos.agregarIndice("factor", indexTerceto);
    mapaTiposTercetos.put(indexTerceto, "Int");
    tercetoStack.push(indexTerceto);
    indexTerceto++;
    RESULT = symbol;
:};


factor ::= STRING_CONSTANT:constant 
{:
    // Generar un identificador único para la constante
    String nombreConstante;
    if (!mapaConstantesString.containsKey(constant.toString())) {
        nombreConstante = "_str_" + contadorString++;
        mapaConstantesString.put(constant.toString(), nombreConstante);
    } else {
        nombreConstante = mapaConstantesString.get(constant.toString());
    }

    // Crear el símbolo
    Simbolo symbol = new Simbolo(nombreConstante, "CTE_STRING", constant.toString(), constant.toString().length());

    // Agregar el símbolo a la tabla si no existe
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(symbol.getNombre())) {
        action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    }

    // Crear el terceto
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, nombreConstante, "_", "_"));
    action_obj.manejador_Tercetos.agregarIndice("factor", indexTerceto);
    mapaTiposTercetos.put(indexTerceto, "String");
    tercetoStack.push(indexTerceto);
    indexTerceto++;

    RESULT = symbol;
:};
factor ::= OPEN_PAREN expression:e CLOSE_PAREN {: RESULT = e; System.out.println("Factor = (Expression)"); :};
/******** TEMAS COMUNES: Si / Si - sino  ********/


// Regla principal para manejar el IF con o sin ELSE
sentence ::= IF condicional OPEN_BRACE sentence_list CLOSE_BRACE
{: 
    System.out.println("If");
    int nroTercetoDesapilado = numerosDeTercetosStack.pop();
    action_obj.manejador_Tercetos.modificarTerceto(nroTercetoDesapilado, 2 ,"[" + Integer.toString(indexTerceto) +"]");

:};

sentence ::= IF condicional OPEN_BRACE sentence_list CLOSE_BRACE 
{:
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI", "_", "_");
    indexTerceto++;
    int nroTercetoDesapilado = numerosDeTercetosStack.pop();
    action_obj.manejador_Tercetos.modificarTerceto(nroTercetoDesapilado, 2 ,"[" + Integer.toString(indexTerceto) +"]");

    numerosDeTercetosStack.push(indexTerceto-1);

:}
ELSE OPEN_BRACE sentence_list CLOSE_BRACE
{: 
    System.out.println("If - Else");
    int nroTercetoDesapilado = numerosDeTercetosStack.pop();

    action_obj.manejador_Tercetos.modificarTerceto(nroTercetoDesapilado, 2 ,"[" + Integer.toString(indexTerceto ) +"]");
:};

/******** TEMAS COMUNES: Condiciones  ********/
condicional ::= OPEN_PAREN simple_condicion CLOSE_PAREN
{: System.out.println("Condicional simple"); :}
| OPEN_PAREN multiple_condicion CLOSE_PAREN
{: System.out.println("Condicional múltiple"); :};

simple_condicion ::= expression:f1 relational_op:r_op expression:f2
{:
    
    int indiceFactor2 = tercetoStack.pop(); 
    int indiceFactor1 = tercetoStack.pop(); 

    String tipoFactor1 = mapaTiposTercetos.get(indiceFactor1);
    String tipoFactor2 = mapaTiposTercetos.get(indiceFactor2);

    // Verificar si los tipos de datos son compatibles
    if (tipoFactor1 == null || tipoFactor2 == null) {
        throw new RuntimeException("Error: Uno de los tipos de los factores no está definido.");
    }

    if (!tipoFactor1.equals(tipoFactor2)) {
        throw new RuntimeException("Type mismatch: No se puede comparar un " + tipoFactor1 + " con un " + tipoFactor2);
    }

    System.out.println("Condición simple con tipos compatibles: " + tipoFactor1 + " y " + tipoFactor2);

    
    int indiceComparacion = action_obj.manejador_Tercetos.getIntermediateCode().size() + 1;
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "[" + indiceFactor1 + "]", "[" + indiceFactor2 + "]");
    mapaTiposTercetos.put(indiceComparacion, "bool");
    indexTerceto++;


    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, operadorContrario, "_", "_");
    numerosDeTercetosStack.push(indexTerceto);
    indexTerceto++;
    
    System.out.println("Bucle While" + indexTerceto);
:};

simple_condicion ::= NOT expression:f1 relational_op:r_op expression:f2
{:
    
    int indiceFactor2 = tercetoStack.pop(); 
    int indiceFactor1 = tercetoStack.pop(); 

    String tipoFactor1 = mapaTiposTercetos.get(indiceFactor1);
    String tipoFactor2 = mapaTiposTercetos.get(indiceFactor2);

    // Verificar si los tipos de datos son compatibles
    if (tipoFactor1 == null || tipoFactor2 == null) {
        throw new RuntimeException("Error: Uno de los tipos de los factores no está definido.");
    }

    if (!tipoFactor1.equals(tipoFactor2)) {
        throw new RuntimeException("Type mismatch: No se puede comparar un " + tipoFactor1 + " con un " + tipoFactor2);
    }

    System.out.println("Condición simple con tipos compatibles: " + tipoFactor1 + " y " + tipoFactor2);

    
    int indiceComparacion = action_obj.manejador_Tercetos.getIntermediateCode().size() + 1;
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "[" + indiceFactor1 + "]", "[" + indiceFactor2 + "]");
    mapaTiposTercetos.put(indiceComparacion, "bool");
    indexTerceto++;

    
    operadorContrario = invertirOperador(operadorContrario);

    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, operadorContrario, "_", "_");
    numerosDeTercetosStack.push(indexTerceto);
    indexTerceto++;
    
    System.out.println("Bucle While" + indexTerceto);
:};





multiple_condicion ::= simple_condicion AND simple_condicion
{:
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI", "[" + Integer.toString(indexTerceto+2 ) + "]", "_");
    indexTerceto++;

    int saltoSegundaCondicion = numerosDeTercetosStack.pop();
    action_obj.manejador_Tercetos.modificarTerceto(saltoSegundaCondicion, 2, "[" + Integer.toString(indexTerceto) + "]");
    int saltoPrimeraCondicion = numerosDeTercetosStack.pop();
    action_obj.manejador_Tercetos.modificarTerceto(saltoPrimeraCondicion, 2, "[" + Integer.toString(indexTerceto) + "]");



    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI", "_", "_");
    numerosDeTercetosStack.push(indexTerceto);
    indexTerceto++;

:};
multiple_condicion ::= simple_condicion
{:
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI", "_", "_");
    numerosDeTercetosStack.push(indexTerceto);
    indexTerceto++;
:} OR simple_condicion
{:

    int saltoSegundaCondicion = numerosDeTercetosStack.pop();
    int saltoBI = numerosDeTercetosStack.pop();

    action_obj.manejador_Tercetos.modificarTerceto(saltoBI, 2, "[" + Integer.toString(indexTerceto) + "]");
    int saltoPrimeraCondicion = numerosDeTercetosStack.pop();
    action_obj.manejador_Tercetos.modificarTerceto(saltoPrimeraCondicion, 2, "[" + Integer.toString(saltoPrimeraCondicion+2) + "]");

    numerosDeTercetosStack.push(saltoSegundaCondicion);
    
:};

relational_op ::= GREATERTHAN
{: operadorContrario = "BLE";
System.out.println("Operador relacional mayor"); :}
| LESSTHAN
{:operadorContrario = "BGE"; 
    System.out.println("Operador relacional menor"); :}
| GREATEREQUAL
{: operadorContrario = "BLT";
System.out.println("Operador relacional mayor o igual"); :}
| LESSEQUAL
{: operadorContrario = "BGT";
System.out.println("Operador relacional menor o igual"); :}
| EQUALS
{: operadorContrario = "BNE"; 
System.out.println("Operador relacional igual"); :}
| NOTEQUALS
{: operadorContrario = "BEQ";
System.out.println("Operador relacional no igual"); :};

/******** TEMAS COMUNES: Mientras  ********/
sentence ::= WHILE 
{:
numerosDeTercetosStack.push(indexTerceto);
:}
condicional OPEN_BRACE sentence_list CLOSE_BRACE
{: 
    System.out.println("Bucle While");
    int nroTercetoDesapilado= numerosDeTercetosStack.pop();
    action_obj.manejador_Tercetos.modificarTerceto(nroTercetoDesapilado, 2 ,"[" + Integer.toString(indexTerceto +1) +"]");


    nroTercetoDesapilado = numerosDeTercetosStack.pop();

    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, "BI", "[" + Integer.toString(nroTercetoDesapilado)+"]", "_"));
    indexTerceto++;



:};


/******** TEMAS COMUNES: Entrada y salida  ********/

sentence ::= READ OPEN_PAREN variable:id CLOSE_PAREN
{: 
    System.out.println("Función Leer");
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto,"READ" ,  id.toString(),"_"));
    indexTerceto++;
:};

sentence ::= WRITE OPEN_PAREN variable:id CLOSE_PAREN
{: 
    System.out.println("Funcion Escribir");
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto,"WRITE" , id.toString() ,"_"));
    indexTerceto++;
:}
| WRITE OPEN_PAREN STRING_CONSTANT:constant CLOSE_PAREN
{:
    System.out.println("Funcion Escribir String");

 // Generar un identificador único para la constante
    String nombreConstante;
    if (!mapaConstantesString.containsKey(constant.toString())) {
        nombreConstante = "_str_" + contadorString++;
        mapaConstantesString.put(constant.toString(), nombreConstante);
    } else {
        nombreConstante = mapaConstantesString.get(constant.toString());
    }

    // Crear el símbolo
    Simbolo symbol = new Simbolo(nombreConstante, "CTE_STRING", constant.toString(), constant.toString().length());

    // Agregar el símbolo a la tabla si no existe
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(symbol.getNombre())) {
        action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    }

    // Crear el terceto
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto,"WRITE" ,nombreConstante, "_"));
 
    indexTerceto++;
:};

sentence ::= WRITELN OPEN_PAREN variable:id CLOSE_PAREN
{: 
    System.out.println("Funcion Escribir");
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto,"WRITELN" , id.toString() ,"_"));
    indexTerceto++;
:}
| WRITELN OPEN_PAREN STRING_CONSTANT:constant CLOSE_PAREN
{:
    System.out.println("Funcion Escribir String");

 // Generar un identificador único para la constante
    String nombreConstante;
    if (!mapaConstantesString.containsKey(constant.toString())) {
        nombreConstante = "_str_" + contadorString++;
        mapaConstantesString.put(constant.toString(), nombreConstante);
    } else {
        nombreConstante = mapaConstantesString.get(constant.toString());
    }

    // Crear el símbolo
    Simbolo symbol = new Simbolo(nombreConstante, "CTE_STRING", constant.toString(), constant.toString().length());

    // Agregar el símbolo a la tabla si no existe
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(symbol.getNombre())) {
        action_obj.manejadorTablaSimbolos.addSymbol(symbol);
    }

    // Crear el terceto
    action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto,"WRITELN" ,nombreConstante, "_"));
 
    indexTerceto++;
:};



variable ::= IDENTIFIER:id
{: 
    if (!action_obj.manejadorTablaSimbolos.containsSymbol(id.toString())) {
        throw new RuntimeException("La variable '" + id.toString() + "' no esta inicializada.");
    }
    RESULT=id;
:};

/******** TEMAS ESPECIALES: getPenultimatePosition  ********/
getPenultimatePosition_expr ::= GET_PENULTIMATE_POSITION
{:
    indexTercetoInicial=indexTerceto;
:} OPEN_PAREN INTEGER_CONSTANT:pivot SEMICOLON OPEN_BRACKET param_list:pl CLOSE_BRACKET CLOSE_PAREN
{:

    int pivotValue = Integer.parseInt(pivot.toString());

    List<Simbolo> elementos = (List<Simbolo>)pl;

    if (pivotValue < 1 || pivotValue > elementos.size()) {
        
        System.out.println("Pivote fuera de rango. Devolviendo 0.");
        action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, "0", "_", "_"));
        mapaTiposTercetos.put(indexTerceto, "Int"); 
        action_obj.manejador_Tercetos.agregarIndice("getPenultimatePosition_expr", indexTerceto);
        indexTerceto++;
    } else {
        Simbolo elementoEnPivote = elementos.get(pivotValue - 1);
        action_obj.manejador_Tercetos.agregarTerceto(new Tercetos(indexTerceto, elementoEnPivote.getValor(), "_", "_"));
        indexTerceto++;
        mapaTiposTercetos.put(indexTerceto, elementoEnPivote.getTipoDato());
        action_obj.manejador_Tercetos.agregarIndice("getPenultimatePosition_expr", (indexTerceto));
    }
    

:};
param_list ::= param_list:pl COMMA factor:f
{:
    // Obtener la lista acumulada de elementos
    List<Simbolo> lista = (List<Simbolo>)pl;
    lista.add((Simbolo)f); 
    RESULT = lista;
    System.out.println("Añadido factor a la lista de parámetros: " + ((Simbolo)f).getValor());
:}
| factor:f
{:

    List<Simbolo> lista = new ArrayList<>();
    lista.add((Simbolo)f); 
    RESULT = lista;
    System.out.println("Factor inicial en la lista de parámetros: " + ((Simbolo)f).getValor());
:};

/******** TEMAS ESPECIALES: binaryCount ********/


binary_count_expr ::= BINARYCOUNT 
{:
    indexTercetoInicial=indexTerceto;

:} OPEN_PAREN OPEN_BRACKET param_list CLOSE_BRACKET CLOSE_PAREN
{:
    // Inicializamos el contador a 0
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=", "0", "@contador");
    indexTerceto++;

    manejadorTablaSimbolos.addSymbol(new Simbolo("@digito", "Int", "", null));
    manejadorTablaSimbolos.addSymbol(new Simbolo("@divisor", "Int", "", null));
    manejadorTablaSimbolos.addSymbol(new Simbolo("@remainder", "Int", "", null));


    if (!action_obj.manejadorTablaSimbolos.containsSymbol("_10")) {
        action_obj.manejadorTablaSimbolos.addSymbol(new Simbolo("_10", "CTE_INTEGER","10", null));
    }

    if (!action_obj.manejadorTablaSimbolos.containsSymbol("_1")) {
        action_obj.manejadorTablaSimbolos.addSymbol(new Simbolo("_1", "CTE_INTEGER","1", null));
    }

    if (!action_obj.manejadorTablaSimbolos.containsSymbol("_0")) {
        action_obj.manejadorTablaSimbolos.addSymbol(new Simbolo("_0", "CTE_INTEGER","0", null));
    }

    manejadorTablaSimbolos.addSymbol(new Simbolo("@num", "Int", "", null));
    manejadorTablaSimbolos.addSymbol(new Simbolo("@contador", "Int", "", null));
    manejadorTablaSimbolos.addSymbol(new Simbolo("@resultado", "Int", "", null));


    // Desapilamos y procesamos cada elemento de la lista (que está en tercetoStack)
    int indexfinal=indexTerceto;
    for (int i =indexTercetoInicial; i<indexfinal -1 ; i++) {
        
        int indiceTerceto = tercetoStack.pop(); 

        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=",  "[" + indiceTerceto + "]", "@num");
        indexTerceto++;

        // Verificar si cada dígito del número es binario (0 o 1)
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "%", "@num", "10");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=", "[" + (indexTerceto - 1) + "]", "@digito");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "@digito", "1");
        indexTerceto++;
        
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BEQ", "[" + (indexTerceto + 4) + "]", "_");
        indexTerceto++;

        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "@digito", "0");
        indexTerceto++;

        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BEQ", "[" + (indexTerceto + 2) + "]", "_");
        indexTerceto++;

        
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI", "[" + (indexTerceto + 17) + "]", "_");
        indexTerceto++;

        // Si es binario, seguimos iterando sobre los dígitos
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "/", "@num", "10");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=","[" + (indexTerceto - 1) + "]", "@num");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "@num", "0");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BEQ", "[" + (indexTerceto + 9) + "]", "_");
        indexTerceto++;
        // Iteración para verificar todos los dígitos
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "%", "@num", "10");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=", "[" + (indexTerceto - 1) + "]", "@digito");
        indexTerceto++;
        
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "@digito", "1");
        indexTerceto++;
        
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BEQ", "[" + (indexTerceto + 4) + "]", "_");
        indexTerceto++;

        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "CMP", "@digito", "0");
        indexTerceto++;

        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BEQ", "[" + (indexTerceto + 2) + "]", "_");
        indexTerceto++;
        
        numerosDeTercetosStack.push(indexTerceto);
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI", "[" + (indexTerceto + 6) + "]", "_");
        indexTerceto++;

        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "BI","[" + (indexTerceto - 11) + "]", "_");
        indexTerceto++;

        // Si es binario, incrementamos el contador
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "@contador", "_", "_");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "1", "_", "_");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "+",  "[" + (indexTerceto - 1) + "]", "[" + (indexTerceto - 2) + "]");
        indexTerceto++;
        action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=", "[" + (indexTerceto - 1) + "]", "@contador");
        indexTerceto++;
    }

    // Devolvemos el resultado
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, ":=", "@contador", "@resultado");
    indexTerceto++;
    action_obj.manejador_Tercetos.crearNuevoTerceto(indexTerceto, "@resultado","", "");
    action_obj.manejador_Tercetos.agregarIndice("binary_count_expr", indexTerceto);
    mapaTiposTercetos.put(indexTerceto, "Int"); 
    indexTerceto++;
    

:};
