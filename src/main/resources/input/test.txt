*- PRUEBAS DE DECLARACIÓN DE VARIABLES -*

init {
    varInt1, varInt2 : Int  *- Declaración de variables enteras -*
}

init {
    varFloat1, varFloat2 : Float  *- Declaración de variables flotantes -*
}

init {
    varString1, varString2 : String  *- Declaración de variables de cadena -*
}

init {
    var1, var2 : Int
    var3, var4 : Float
    var5, var6 : String  *- Declaración mixta de variables -*
}

*- PRUEBAS DE ASIGNACIONES -*

varInt1 := 5  *- Asignación de constantes enteras -*

varFloat1 := 3.14  *- Asignación de constantes flotantes -*

varString1 := "Hello"  *- Asignación de constantes de cadena -*

varInt2 := varInt1 + 10  *- Suma de variables enteras y constantes -*
varFloat2 := varFloat1 * 2.5  *- Multiplicación de variables flotantes y constantes -*
varInt1 := varInt2 - 3  *- Resta de variables enteras y constantes -*
varFloat1 := varFloat2 / 1.5  *- División de variables flotantes y constantes -*

varInt1 := binaryCount([110, 1, 0, 5, 10101])  *- Asignación con función binaryCount -*

varInt1 := getPenultimatePosition(3; [3, 8.2, 2, 55.5, 7, 252])  *- Asignación con función getPenultimatePosition con resultado entero -*
varFloat1 := getPenultimatePosition(2; [5.5, 10.1, 20.3])  *- Asignación con función getPenultimatePosition con resultado flotante -*

*- PRUEBAS DE EXPRESIONES ARITMÉTICAS -*

varInt1 := varInt2 + varInt1 - 3  *- Suma y resta de variables enteras -*
varFloat1 := varFloat2 * 2.5 / 1.5  *- Multiplicación y división de variables flotantes -*

*- PRUEBAS DE ERRORES -*

*-varInt1 := 3.14  *- Error: Asignación de flotante a variable entera -*
*-varFloat1 := 3 * 2.1  *- Error: Operaciones entre tipos de dato de distinto tipo -*
*-varFloat1 := 5  *- Error: Asignación de entero a variable flotante -*
*-varString1 := 123 *- Error: Asignación de entero a variable de cadena -*
*-varInt1 := varString1 + 5  *- Error: Operación aritmética entre cadena y entero -*
*-varFloat1 := varInt1 * "Hello" *- Error: Operación aritmética entre entero y cadena -*
*-varInt1 := getPenultimatePosition(0; [5.5, 10.1, 20.3])  *- Error: Pivote fuera de rango en getPenultimatePosition -*
*-varFloat1 := getPenultimatePosition(5; [3, 8.2, 2])  *- Error: Type missmatch -*


